--DataXQuery--
  T1 = SELECT
        *,
        filterNull(
            Array(
                IF(
                    Temperature > 90,
                    MAP(
                        'ruleId',
                        'R1',
                        'ruleDescription',
                        'Detects hot condition',
                        'severity',
                        'Critical',
                        'Tag',
                        'Hot'
                    ),
                    NULL
                ),
                IF(
                    Temperature < 40,
                    MAP(
                        'ruleId',
                        'R2',
                        'ruleDescription',
                        'Detects cold condition',
                        'severity',
                        'Critical',
                        'Tag',
                        'Cold'
                    ),
                    NULL
                )  
            )
        ) AS Rules 
    FROM
        DataXProcessedInput
    
    
--DataXQuery--
   ar1_3_1 = SELECT
        AVG(Temperature) AS Temperature_AVG,
        MIN(Temperature) AS Temperature_MIN,
        MAX(Temperature) AS Temperature_MAX,
        DeviceId,
        Geo,
        COUNT(*) AS Count   
    FROM
        DataXProcessedInput   
    GROUP BY
        DeviceId,
        Geo
    
--DataXQuery--
   ar2_3_1 = SELECT
        *,
        IF(
            Temperature_AVG > 90,
            MAP(
                'ruleId',
                'R3',
                'ruleDescription',
                'Detects hot condition average',
                'severity',
                'Critical',
                'Tag',
                'HotAgg'
            ),
            NULL
        ) AS RuleObject   
    FROM
        ar1_3_1
    
--DataXQuery--
   ar3_3_1 = SELECT
        MAP(
            'DeviceId',
            DeviceId,
            'Geo',
            Geo     
        ) AS pivots,
        MAP(
            'Temperature',
            MAP(
                'AVG',
                Temperature_AVG,
                'MIN',
                Temperature_MIN,
                'MAX',
                Temperature_MAX
            )   
        ) AS aggs,
        Count AS count,
        MAP(
            'ruleId',
            'R3',
            'Tag',
            'HotAgg',
            'description',
            'Detects hot condition average',
            'severity',
            'Critical'     
        ) AS result 
    FROM
        ar2_3_1
    
--DataXQuery--
   ar1_3_2 = SELECT
        AVG(Humidity) AS Humidity_AVG,
        MIN(Temperature) AS Temperature_MIN,
        MAX(Temperature) AS Temperature_MAX,
        DeviceId,
        COUNT(*) AS Count   
    FROM
        DataXProcessedInput   
    GROUP BY
        DeviceId
    
--DataXQuery--
   ar2_3_2 = SELECT
        *,
        IF(
            Humidity_AVG > 40 
            AND Temperature_MIN > 80,
            MAP(
                'ruleId',
                'R4',
                'ruleDescription',
                'Detects hot condition average',
                'severity',
                'Critical',
                'Tag',
                'Anomaly'
            ),
            NULL
        ) AS RuleObject   
    FROM
        ar1_3_2
    
--DataXQuery--
   ar3_3_2 = SELECT
        MAP(
            'DeviceId',
            DeviceId     
        ) AS pivots,
        MAP(
            'Humidity',
            MAP(
                'AVG',
                Humidity_AVG
            ),
            'Temperature',
            MAP(
                'MIN',
                Temperature_MIN,
                'MAX',
                Temperature_MAX
            )   
        ) AS aggs,
        Count AS count,
        MAP(
            'ruleId',
            'R4',
            'Tag',
            'Anomaly',
            'description',
            'Detects hot condition average',
            'severity',
            'Critical'     
        ) AS result 
    FROM
        ar2_3_2
    
--DataXQuery--
  ar4_3 = SELECT
        * 
    FROM
        ar3_3_1 
    UNION
    SELECT
        * 
    FROM
        ar3_3_2    
--DataXQuery--
  T2 = SELECT
            * 
        FROM
            ar4_3
    
--DataXQuery--
  sa1_1_1 = SELECT
        *,
        'R1' AS ruleId,
        'Detects hot condition' AS ruleDescription,
        'Critical' AS severity,
        'Hot' AS Tag 
    FROM
        DataXProcessedInput  
    WHERE
        Temperature > 90
    
--DataXQuery--
  sa2_1_1 = SELECT
        * 
    FROM
        sa1_1_1
    
--DataXQuery--
  HotAlert = SELECT
        DISTINCT DATE_TRUNC('second',
        current_timestamp()) AS EventTime,
        'HotAlert' AS MetricName,
        0 as Metric,
        'P1' AS Product,
        'Detects hot condition' AS Pivot1 
    FROM
        sa1_1_1
    
    
--DataXQuery--
  aa1_4_1 = SELECT
        AVG(Temperature) AS Temperature_AVG,
        MIN(Temperature) AS Temperature_MIN,
        MAX(Temperature) AS Temperature_MAX,
        DeviceId,
        Geo,
        COUNT(*) AS Count  
    FROM
        DataXProcessedInput  
    GROUP BY
        DeviceId,
        Geo
    
--DataXQuery--
  aa2_4_1 = SELECT
        *,
        MAP(
            'ruleId',
            'R3',
            'ruleDescription',
            'Detects hot condition average',
            'severity',
            'Critical',
            'Tag',
            'HotAgg'
        ) AS RuleObject 
    FROM
        aa1_4_1 
    WHERE
        Temperature_AVG > 90
    
--DataXQuery--
  aa3_4_1 = SELECT
        * 
    FROM
        aa2_4_1
    
--DataXQuery--
  HotAggAlert = SELECT
        DISTINCT DATE_TRUNC('second',
        current_timestamp()) AS EventTime,
        'HotAggAlert' AS MetricName,
        0 as Metric,
        'P1' AS Product,
        RuleObject.ruleDescription AS Pivot1 
    FROM
        aa2_4_1
    
    
--DataXQuery--
  T3 = SELECT
        *,
        42 AS AnswerToLife2       
    FROM
        DataXProcessedInput_50seconds       
    
--DataXQuery--
  Temp =   SELECT
        COUNT(*) AS Count  
    FROM
        DataXProcessedInput  
    UNION
    ALL  SELECT
        *  
    FROM
        EventCount
    
--DataXQuery--
  T4 = SELECT
        *  
    FROM
        DataXProcessedInput_40seconds  
    
--DataXQuery--
 HeaterStateOneIsOn = SELECT
        DISTINCT DATE_TRUNC('second',
        current_timestamp()) AS EventTime,
        'HeaterStateOneIsOn' AS MetricName,
        deviceDetails.status AS Metric,
        'P1' AS Product,
        '' AS Pivot1 
    FROM
        DataXProcessedInput 
    GROUP BY
        EventTime,
        MetricName,
        Metric,
        Product,
        Pivot1