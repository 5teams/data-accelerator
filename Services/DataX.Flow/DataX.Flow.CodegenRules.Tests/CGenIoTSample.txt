--DataXQuery--
  DeviceWindowedInput = SELECT
        deviceDetails.deviceId,
        deviceDetails.deviceType,
        eventTimeStamp,
        deviceDetails.homeId,
        deviceDetails.status                      
    FROM
        DataXProcessedInput_5minutes                       
    GROUP BY
        deviceId,
        deviceType,
        eventTimeStamp,
        homeId,
        status
    
--DataXQuery--
  DeviceNotWindowedInputWithName = SELECT
        DataXProcessedInput.deviceDetails.deviceId,
        DataXProcessedInput.deviceDetails.deviceType,
        eventTimeStamp,
        DataXProcessedInput.deviceDetails.homeId,
        DataXProcessedInput.deviceDetails.status,
        myDevicesRefdata.deviceName                      
    FROM
        DataXProcessedInput                       
    JOIN
        myDevicesRefdata                       
            ON DataXProcessedInput.deviceDetails.deviceId = myDevicesRefdata.deviceId                       
            AND DataXProcessedInput.deviceDetails.homeId = myDevicesRefdata.homeId
    
--DataXQuery--
  DeviceNotWindowedInputWithNameAndWho = SELECT
        deviceId,
        deviceType,
        eventTimeStamp,
        homeId,
        status,
        deviceName,
        whoOpened(CAST(deviceId AS String)) AS whoOpened                      
FROM
    DeviceNotWindowedInputWithName
    
--DataXQuery--
  DeviceInfoTimeWindow = SELECT
        deviceId,
        deviceType,
        homeId,
        MAX(eventTimeStamp) AS MaxEventTime,
        MIN(status) AS MinReading,
        MAX(status) AS MaxReading                  
    FROM
        DeviceWindowedInput                  
    GROUP BY
        deviceId,
        deviceType,
        homeId
    
--DataXQuery--
  HeaterStateFiltered = SELECT
        eventTimeStamp,
        deviceDetails.deviceId,
        deviceDetails.deviceType,
        deviceDetails.homeId,
        deviceDetails.status       
    FROM
        DataXProcessedInput       
    WHERE
        deviceDetails.homeId = 150        
        AND deviceDetails.deviceType = 'Heating'       
    GROUP BY
        eventTimeStamp,
        deviceId,
        deviceType,
        homeId,
        status
    
--DataXQuery--
 HeaterStateOneIsOn = SELECT
        DISTINCT DATE_TRUNC('second',
        current_timestamp()) AS EventTime,
        'HeaterStateOneIsOn' AS MetricName,
        status AS Metric,
        'iotsample' AS Product,
        '' AS Pivot1 
    FROM
        HeaterStateFiltered 
    GROUP BY
        EventTime,
        MetricName,
        Metric,
        Product,
        Pivot1
    
    
--DataXQuery--
  WindowLockStateFiltered = SELECT
        eventTimeStamp,
        deviceDetails.deviceId,
        deviceDetails.deviceType,
        deviceDetails.homeId,
        deviceDetails.status         
    FROM
        DataXProcessedInput         
    WHERE
        deviceDetails.homeId = 150          
        AND deviceDetails.deviceType = 'WindowLock'         
    GROUP BY
        eventTimeStamp,
        deviceId,
        deviceType,
        homeId,
        status
    
--DataXQuery--
 WindowLockStateOneIsLocked = SELECT
        DISTINCT DATE_TRUNC('second',
        current_timestamp()) AS EventTime,
        'WindowLockStateOneIsLocked' AS MetricName,
        status AS Metric,
        'iotsample' AS Product,
        '' AS Pivot1 
    FROM
        WindowLockStateFiltered 
    GROUP BY
        EventTime,
        MetricName,
        Metric,
        Product,
        Pivot1
    
    
--DataXQuery--
  WindowLockWindowedFiltered = SELECT
        *         
    FROM
        DeviceInfoTimeWindow         
    INNER JOIN
        WindowLockStateFiltered 
            ON WindowLockStateFiltered.eventTimeStamp = DeviceInfoTimeWindow.MaxEventTime         
    WHERE
        DeviceInfoTimeWindow.homeId = 150          
        AND DeviceInfoTimeWindow.deviceType = 'WindowLock'
    
--DataXQuery--
 WindowLockStateWindowed = SELECT
        DISTINCT DATE_TRUNC('second',
        current_timestamp()) AS EventTime,
        'WindowLockStateWindowed' AS MetricName,
        MaxReading AS Metric,
        'iotsample' AS Product,
        '' AS Pivot1 
    FROM
        WindowLockWindowedFiltered 
    GROUP BY
        EventTime,
        MetricName,
        Metric,
        Product,
        Pivot1
    
    
--DataXQuery--
  WindowOpenFiveMin = SELECT
        MaxEventTime,
        MaxReading                      
    FROM
        DeviceInfoTimeWindow                      
    INNER JOIN
        WindowLockStateFiltered 
            ON WindowLockStateFiltered.eventTimeStamp = DeviceInfoTimeWindow.MaxEventTime                      
    WHERE
        DeviceInfoTimeWindow.homeId = 150                          
        AND DeviceInfoTimeWindow.MaxReading = 0                          
        AND DeviceInfoTimeWindow.deviceType = 'WindowLock'
    
--DataXQuery--
  WindowOpenFiveMinWhileHeaterOnCombinedAlert = SELECT
        MaxEventTime AS EventTime,
        'WindowOpenFiveMinWhileHeaterOnCombinedAlert' AS MetricName,
        0 AS Metric,
        'iotsample' AS Product,
        'Window open for 5+ minutes while heater is on.' AS Pivot1                                  
    FROM
        WindowOpenFiveMin                                  
    INNER JOIN
        HeaterStateFiltered 
            ON HeaterStateFiltered.eventTimeStamp = WindowOpenFiveMin.MaxEventTime                                  
    WHERE
        WindowOpenFiveMin.MaxReading = 0                                      
        AND HeaterStateFiltered.status = 1
    
--DataXQuery--
  DoorLockStatusFiltered = SELECT
        *        
    FROM
        DataXProcessedInput        
    WHERE
        deviceDetails.homeId = 150                           
        AND deviceDetails.deviceType = 'DoorLock'
    
--DataXQuery--
 DoorLockStatusOneForLocked = SELECT
        DISTINCT DATE_TRUNC('second',
        current_timestamp()) AS EventTime,
        'DoorLockStatusOneForLocked' AS MetricName,
        deviceDetails.status AS Metric,
        'iotsample' AS Product,
        '' AS Pivot1 
    FROM
        DoorLockStatusFiltered 
    GROUP BY
        EventTime,
        MetricName,
        Metric,
        Product,
        Pivot1
    
    
--DataXQuery--
  DoorUnlockedSimpleAlert = SELECT
        DISTINCT                          eventTimeStamp AS EventTime,
        'DoorUnlockedSimpleAlert' AS MetricName,
        0 AS Metric,
        'iotsample' AS Product,
        CONCAT('Door unlocked: ',
        deviceName,
        ' at home ',
        homeId) AS Pivot1                          
    FROM
        DeviceNotWindowedInputWithNameAndWho                          
    WHERE
        deviceType = 'DoorLock' 
        AND                          homeId = 150 
        AND                          status = 0
    
--DataXQuery--
  GarageDoorStatusFiltered = SELECT
        eventTimeStamp,
        deviceDetails.deviceId,
        deviceDetails.deviceType,
        deviceDetails.homeId,
        deviceDetails.status        
    FROM
        DataXProcessedInput        
    WHERE
        deviceDetails.homeId = 150         
        AND deviceDetails.deviceType = 'GarageDoorLock'        
    GROUP BY
        eventTimeStamp,
        deviceId,
        deviceType,
        homeId,
        status
    
--DataXQuery--
 GarageDoorStatusOneForLocked = SELECT
        DISTINCT DATE_TRUNC('second',
        current_timestamp()) AS EventTime,
        'GarageDoorStatusOneForLocked' AS MetricName,
        status AS Metric,
        'iotsample' AS Product,
        '' AS Pivot1 
    FROM
        GarageDoorStatusFiltered 
    GROUP BY
        EventTime,
        MetricName,
        Metric,
        Product,
        Pivot1
    
    
--DataXQuery--
  GarageDoorAccumalator = SELECT
        deviceId,
        deviceType,
        homeId,
        eventTimeStamp AS EventTime,
        status AS Reading                          
    FROM
        DeviceNotWindowedInputWithName                          
    WHERE
        homeId = 150                              
        AND deviceType = 'GarageDoorLock'                          
    UNION
    ALL                          SELECT
        deviceId,
        deviceType,
        homeId,
        EventTime,
        Reading                          
    FROM
        iotsample_GarageDoor_status_accumulated                          
    WHERE
        hour(EventTime) = hour(current_timestamp())
    
--DataXQuery--
  iotsample_GarageDoor_status_accumulated = SELECT
        deviceId,
        deviceType,
        homeId,
        EventTime,
        Reading  
    FROM
        GarageDoorAccumalator
    
--DataXQuery--
  GarageDoorOpenInAnHour = SELECT
        COUNT(DISTINCT EventTime) AS MinsGarageOpenedInHour,
        MAX(EventTime) AS EventTime                                  
    FROM
        iotsample_GarageDoor_status_accumulated                                  
    WHERE
        homeId = 150                                      
        AND deviceType = 'GarageDoorLock'                                      
        AND Reading = 0                                      
        AND unix_timestamp() - to_unix_timestamp(EventTime,'yyyy-MM-dd') < 3600
    
--DataXQuery--
  GarageDoorMinutesOpenedFiltered = SELECT
        MAX(eventTimeStamp) AS EventTime,
        COUNT(DISTINCT eventTimeStamp) AS MinutesCount            
    FROM
        DeviceWindowedInput            
    WHERE
        homeId = 150             
        AND deviceType = 'GarageDoorLock'             
        AND status = 0
    
--DataXQuery--
 GarageDoorMinutesOpenedIn5minutes = SELECT
        DISTINCT DATE_TRUNC('second',
        current_timestamp()) AS EventTime,
        'GarageDoorMinutesOpenedIn5minutes' AS MetricName,
        MinutesCount AS Metric,
        'iotsample' AS Product,
        '' AS Pivot1 
    FROM
        GarageDoorMinutesOpenedFiltered 
    GROUP BY
        EventTime,
        MetricName,
        Metric,
        Product,
        Pivot1
    
    
--DataXQuery--
  GarageOpenForFiveMinsWindowAlert = SELECT
        EventTime AS EventTime,
        'GarageOpenForFiveMinsWindowAlert' AS MetricName,
        0 AS Metric,
        'iotsample' AS Product,
        'Garage door opened for >=5 mins' AS Pivot1                                  
    FROM
        GarageDoorMinutesOpenedIn5minutes                                  
    WHERE
        Metric >= 5
    
--DataXQuery--
 GarageMinutesOpenedInAnHour = SELECT
        DISTINCT DATE_TRUNC('second',
        current_timestamp()) AS EventTime,
        'GarageMinutesOpenedInAnHour' AS MetricName,
        MinsGarageOpenedInHour AS Metric,
        'iotsample' AS Product,
        '' AS Pivot1 
    FROM
        GarageDoorOpenInAnHour 
    GROUP BY
        EventTime,
        MetricName,
        Metric,
        Product,
        Pivot1
    
    
--DataXQuery--
  GarageOpenFor30MinutesInHourThresholdAlert = SELECT
        EventTime AS EventTime,
        'GarageOpenFor30MinutesInHourThresholdAlert' AS MetricName,
        0 AS Metric,
        'iotsample' AS Product,
        CONCAT('Garage door opened for >= 30 minutes in last hour: ',
        Metric) AS Pivot1                                  
    FROM
        GarageMinutesOpenedInAnHour                                  
    WHERE
        Metric >= 30
    
--DataXQuery--
  sa1_1_1 = SELECT
        *,
        'R100' AS ruleId,
        'DoorLock Close' AS ruleDescription,
        'Critical' AS severity,
        'CLOSE' AS Tag 
    FROM
        DataXProcessedInput  
    WHERE
        deviceDetails.deviceType = 'DoorLock' 
        AND deviceDetails.status = 1
    
--DataXQuery--
  sa2_1_1 = SELECT
        * 
    FROM
        sa1_1_1
    
--DataXQuery--
  CLOSEAlert = SELECT
        DISTINCT DATE_TRUNC('second',
        current_timestamp()) AS EventTime,
        'CLOSEAlert' AS MetricName,
        0 as Metric,
        'iotsample' AS Product,
        'DoorLock Close' AS Pivot1 
    FROM
        sa1_1_1